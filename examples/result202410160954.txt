# ELI5
In this PEP, a new Python interactive shell called PyREPL is introduced, enhancing user experience with modern features like multi-line editing and syntax highlighting.

- Python's interactive mode, known as the REPL, is a core feature.
- The old REPL was written in C, making it hard to maintain and extend.
- Users lacked modern features like multi-line editing and syntax highlighting.
- This made it difficult for beginners and educators to use Python effectively.
- The new REPL is implemented in Python, making it easier to modify and improve.
- It uses existing code from a project called PyREPL, which is reliable and well-tested.
- New features include multi-line command history, improved copying and pasting, and custom commands.
- Users can now edit commands across multiple lines and navigate their history easily.
- The new REPL supports colored prompts and outputs, enhancing readability.
- It maintains backward compatibility with the old REPL, allowing users to switch back if needed.
- There are no security risks associated with this new implementation.
- Educational resources will be provided to help users adapt to the new features.
- The decision not to extend the old C implementation or create a new REPL from scratch ensures a smoother transition.
- This change aims to create a more user-friendly and responsive interactive experience in Python.

In conclusion, the introduction of PyREPL marks a significant step forward in making Python's interactive shell more modern, accessible, and enjoyable for all users!

## SUMMARY
PEP 762, authored by Pablo Galindo Salgado and others, proposes a new Python REPL in version 3.13, enhancing user experience with modern features.

## IDEAS:
- The new REPL is written in Python, increasing maintainability and community contributions.
- Previous REPL was difficult to extend and lacked modern features, limiting user experience.
- The new implementation introduces multi-line editing, history navigation, and syntax highlighting.
- Custom commands enhance user interaction, avoiding previously confusing behaviors.
- The implementation leverages PyREPL, providing a battle-tested codebase.
- Easier testing and validation in Python compared to C promotes comprehensive coverage.
- Improved accessibility of the codebase fosters faster feature development.
- Backward compatibility ensures users can switch back to the old REPL if needed.
- Enhanced features cater to users with limited control over dependencies.
- PyREPL's design simplifies adding new features and bug fixes.
- The use of colors improves visibility in prompts and output, enhancing the user experience.
- The transition documentation aids users in adapting to the new REPL.
- The proposal includes clear guidelines for teaching the new features effectively.
- The new REPL is designed to enhance the interactive Python experience significantly.
- The architecture avoids the complexity associated with existing libraries like readline.
- A paste mode allows users to insert multi-line code without execution issues.
  
## QUOTES:
- "One of Pythonâ€™s core strengths is its interactive mode, also known as the Read-Eval-Print Loop (REPL)."
- "This change has made it easier to test, validate, and modify the REPL."
- "The previous REPL made it challenging to properly implement custom commands."
- "By adopting PyREPL, we can leverage existing, proven code rather than starting from scratch."
- "The implementation is in Python, offering several advantages."
- "The PyREPL implementation is designed to maintain full backward compatibility."
- "Users have the option to explicitly choose the old basic REPL by setting the environment variable."
- "The introduction of PyREPL does not remove any existing functionality."
- "Writing tests for Python code is dramatically simpler and more straightforward than for C code."
- "Enhanced features cater to users with limited control over dependencies."
- "Multi-line History and Editing: Users are able to navigate and edit their command history."
- "Colors can be disabled using the standard `NO_COLOR` environment variable."
  
## FACTS:
- The new REPL will be included in Python version 3.13.
- The previous interactive shell was written in C and relied on GNU readline.
- PyREPL was selected for its maturity and feature set.
- The proposal was created on October 11, 2024.
- The new REPL supports automatic indentation according to PEP 8.
- Multi-line editing improves the handling of complex code blocks.
- Users can search command history using Ctrl+S and Ctrl+R.
- The new REPL allows for transparent pasting of code blocks.
- The initial implementation does not offer customization of the color theme.
- Custom commands include `exit`, `quit`, `copyright`, `help`, and `clear`.
- The REPL supports both single-line and multi-line command input.
  
## REFERENCES:
- PyREPL (https://github.com/pypy/pypy/tree/d102094b863ce49b7af030dcb0cecaac515d97c6/lib_pypy/pyrepl)
- PEP 8 (https://peps.python.org/pep-0008/)
- IPython (https://ipython.org/)
- bpython (https://bpython-interpreter.org/)
- ptpython (https://github.com/prompt-toolkit/ptpython)
- xonsh (https://xon.sh/)
  
## RECOMMENDATIONS:
- Transition to the new REPL to take advantage of modern features.
- Leverage documentation and tutorials to learn about new functionalities.
- Use custom commands to streamline interactions within the REPL.
- Experiment with multi-line editing for complex code snippets.
- Utilize the paste mode to simplify code insertion from external sources.
- Keep the old REPL as a fallback option during the transition.
- Encourage community contributions to further enhance the REPL.
- Stay updated with changes and improvements in future Python releases.
- Provide feedback on the new REPL to help shape future iterations.
- Explore the use of colors in prompts to improve visibility.
URL: https://peps.python.org/pep-0762/
